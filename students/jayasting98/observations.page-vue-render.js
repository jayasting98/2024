
    const renderFn = new Function("const { createElementVNode: _createElementVNode, createTextVNode: _createTextVNode, resolveComponent: _resolveComponent, withCtx: _withCtx, createVNode: _createVNode, createStaticVNode: _createStaticVNode, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock } = Vue\n\nconst _hoisted_1 = { fixed: \"\" }\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"a\", {\n  href: \"/2024/index.html\",\n  title: \"Home\",\n  class: \"navbar-brand\"\n}, \"CS3281&2-2024/Students\", -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/2024/index.html\",\n    class: \"dropdown-item\"\n  }, \"Students\")\n], -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/2024/students/knowledge.html\",\n    class: \"dropdown-item\"\n  }, \"Knowledge\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"https://nus-cs3281.github.io/2024-dashboard/?search=&sort=groupTitle&sortWithin=title&timeframe=commit&mergegroup=&groupSelect=groupByAuthors&breakdown=false\",\n    class: \"dropdown-item\"\n  }, \"Code Dashboard\")\n], -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/2024/activities-dashboard.html\",\n    class: \"dropdown-item\"\n  }, \"Activities Dashboard\")\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/2024/cs3282-index.html\",\n    class: \"dropdown-item\"\n  }, \"Students\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/2024/students/talksSchedule.html\",\n    class: \"dropdown-item\"\n  }, \"Lightning Talks\")\n], -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/2024/activities-dashboard.html\",\n    class: \"dropdown-item\"\n  }, \"Activities Dashboard\")\n], -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/2024/instructions.html\",\n    class: \"nav-link\"\n  }, \"Instructions\")\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"https://nus-cs3281.github.io/website/\",\n    class: \"nav-link\"\n  }, [\n    /*#__PURE__*/_createTextVNode(\"CS3281&2 Website \"),\n    /*#__PURE__*/_createElementVNode(\"span\", null, [\n      /*#__PURE__*/_createElementVNode(\"span\", {\n        \"aria-hidden\": \"true\",\n        class: \"glyphicon glyphicon-share-alt\"\n      })\n    ])\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"https://github.com/nus-cs3281/2024\",\n    class: \"nav-link\"\n  }, [\n    /*#__PURE__*/_createElementVNode(\"span\", null, [\n      /*#__PURE__*/_createElementVNode(\"span\", {\n        \"aria-hidden\": \"true\",\n        class: \"fab fa-github\"\n      })\n    ])\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_13 = { id: \"flex-body\" }\nconst _hoisted_14 = {\n  id: \"content-wrapper\",\n  class: \"fixed-header-padding\"\n}\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"h3\", { id: \"project-python-cpython\" }, [\n  /*#__PURE__*/_createTextVNode(\"Project: Python (CPython)\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#project-python-cpython\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Python is a high-level, general-purpose programming language. CPython is the reference implementation of the Python programming language. Written in C and Python, CPython is the default and most widely used implementation of the Python language.\", -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"h3\", { id: \"my-contributions\" }, [\n  /*#__PURE__*/_createTextVNode(\"My Contributions\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#my-contributions\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/_createElementVNode(\"h4\", { id: \"gh-115323-add-meaningful-error-message-for-using-bytearray-extend-with-str\" }, [\n  /*#__PURE__*/_createElementVNode(\"a\", { href: \"https://github.com/python/cpython/pull/115332\" }, \"gh-115323: Add meaningful error message for using bytearray.extend with str\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#gh-115323-add-meaningful-error-message-for-using-bytearray-extend-with-str\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createTextVNode(\"I added a more meaningful error message when \"),\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"bytearray.extend\"),\n  /*#__PURE__*/_createTextVNode(\" is incorrectly used with a \"),\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"str\"),\n  /*#__PURE__*/_createTextVNode(\" object input, to tackle the bug highlighted in the GitHub issue, \\\"\"),\n  /*#__PURE__*/_createElementVNode(\"a\", { href: \"https://github.com/python/cpython/issues/115323\" }, \"bytearray.extend: Misleading error message\"),\n  /*#__PURE__*/_createTextVNode(\"\\\".\")\n], -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/_createStaticVNode(\"<p><code class=\\\"hljs inline no-lang\\\">str</code> is a built-in type in Python. <code class=\\\"hljs inline no-lang\\\">str</code> objects are strings of text; strings are immutable sequences of Unicode code points. <code class=\\\"hljs inline no-lang\\\">bytearray</code> is another built-in type in Python; <code class=\\\"hljs inline no-lang\\\">bytearray</code> objects are mutable sequences of single bytes. <code class=\\\"hljs inline no-lang\\\">bytearray.extend</code> can be used to add all the bytes of another sequence of bytes to the end of the <code class=\\\"hljs inline no-lang\\\">bytearray</code> object. This means that <code class=\\\"hljs inline no-lang\\\">bytearray.extend</code> can only be used with inputs that are sequences of individual bytes. In other words, <code class=\\\"hljs inline no-lang\\\">str</code> objects cannot be used as input to <code class=\\\"hljs inline no-lang\\\">bytearray.extend</code> because they are not sequences of single bytes.</p>\", 1)\nconst _hoisted_21 = /*#__PURE__*/_createStaticVNode(\"<p>When a <code class=\\\"hljs inline no-lang\\\">str</code> object is passed as input into <code class=\\\"hljs inline no-lang\\\">bytearray.extend</code>, Python correctly raises an error due to the type of the input. However, the error message is misleading, as it states <code class=\\\"hljs inline no-lang\\\">TypeError: &#39;str&#39; object cannot be interpreted as an integer</code>. The <code class=\\\"hljs inline no-lang\\\">str</code> object mentioned can be interpreted as referring to the input passed, which seems to suggest that integers can be passed as input, which is incorrect because integers are not sequences, much less sequences of bytes. In reality, the <code class=\\\"hljs inline no-lang\\\">str</code> object mentioned is referring to the elements of the sequence represented by the input <code class=\\\"hljs inline no-lang\\\">str</code> object, which are themselves also <code class=\\\"hljs inline no-lang\\\">str</code> objects.</p>\", 1)\nconst _hoisted_22 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createTextVNode(\"The error message is not wrong. However, it is just misleading. The PR I contributed fixed this by doing a check when an error is raised for when the input is a \"),\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"str\"),\n  /*#__PURE__*/_createTextVNode(\" object, before changing the error message to a more meaningful one, which would be \"),\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"TypeError: expected iterable of integers; got: 'str'\"),\n  /*#__PURE__*/_createTextVNode(\".\")\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/_createElementVNode(\"h3\", { id: \"my-learning-record\" }, [\n  /*#__PURE__*/_createTextVNode(\"My Learning Record\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#my-learning-record\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/_createElementVNode(\"h4\", { id: \"tools-and-technologies\" }, [\n  /*#__PURE__*/_createTextVNode(\"Tools and technologies\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#tools-and-technologies\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/_createElementVNode(\"h5\", { id: \"restructuredtext-rst\" }, [\n  /*#__PURE__*/_createTextVNode(\"reStructuredText (RST)\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#restructuredtext-rst\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"NEWS\", -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/_createElementVNode(\"sup\", { class: \"footnote-ref\" }, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    \"aria-describedby\": \"footnote-label\",\n    href: \"#fn--1\"\n  }, \"[1]\")\n], -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/_createElementVNode(\"a\", { href: \"https://devguide.python.org/documentation/markup/\" }, \"Python Developer's Guide page on RST\", -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/_createElementVNode(\"h4\", { id: \"comparisons-between-the-external-project-and-the-internal-project\" }, [\n  /*#__PURE__*/_createTextVNode(\"Comparisons between the external project and the internal project\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#comparisons-between-the-external-project-and-the-internal-project\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_30 = /*#__PURE__*/_createElementVNode(\"h5\", { id: \"the-python-project-seems-to-care-a-lot-more-about-performance\" }, [\n  /*#__PURE__*/_createTextVNode(\"The Python project seems to care a lot more about performance\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#the-python-project-seems-to-care-a-lot-more-about-performance\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_31 = /*#__PURE__*/_createElementVNode(\"p\", null, \"My first attempt at fixing the misleading error message was checking the type of the input very early on, even before any error was raised. I believe that in any other project, including in TEAMMATES, my first attempt might be seen as reasonable, and I think it might even be accepted, maybe after only a few minor changes, if any.\", -1 /* HOISTED */)\nconst _hoisted_32 = /*#__PURE__*/_createElementVNode(\"p\", null, \"However, this was not the most performant way to fix the bug. Checking the type of the input before an error is raised means that the input would be checked even if the input was valid. The first review wanted me to change this, and so I did.\", -1 /* HOISTED */)\nconst _hoisted_33 = /*#__PURE__*/_createElementVNode(\"h5\", { id: \"the-python-project-seems-to-document-virtually-every-change-into-its-changelog-and-highlights-more-important-ones\" }, [\n  /*#__PURE__*/_createTextVNode(\"The Python project seems to document virtually every change into its changelog and highlights more important ones\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#the-python-project-seems-to-document-virtually-every-change-into-its-changelog-and-highlights-more-important-ones\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_34 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createTextVNode(\"When I made my PR to fix the misleading error message, I was also required to write a \"),\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"NEWS\"),\n  /*#__PURE__*/_createTextVNode(\" entry, just like almost every other PR made to the project. In the Python project, \"),\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"NEWS\"),\n  /*#__PURE__*/_createTextVNode(\" entries document contributions so that it can be added into the changelog. They are necessary for any contribution made, except for those that do not affect users of the Python programming language itself, including:\")\n], -1 /* HOISTED */)\nconst _hoisted_35 = /*#__PURE__*/_createElementVNode(\"ul\", null, [\n  /*#__PURE__*/_createElementVNode(\"li\", null, \"documentation changes\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"li\", null, \"test changes\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"li\", null, \"strictly internal changes with no user-visible effects\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"li\", null, [\n    /*#__PURE__*/_createTextVNode(\"changes that already have a \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"NEWS\"),\n    /*#__PURE__*/_createTextVNode(\" entry\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"li\", null, \"reverts that have not yet been included in any formal release (including alpha and beta releases)\")\n], -1 /* HOISTED */)\nconst _hoisted_36 = /*#__PURE__*/_createElementVNode(\"p\", null, \"From what I understand, changes that are more significant can be highlighted in \\\"What's New in Python\\\" entries.\", -1 /* HOISTED */)\nconst _hoisted_37 = /*#__PURE__*/_createElementVNode(\"p\", null, \"In comparison, I do not think this is done in TEAMMATES. I think all the changes are mentioned equally in the releases.\", -1 /* HOISTED */)\nconst _hoisted_38 = /*#__PURE__*/_createElementVNode(\"h5\", { id: \"the-python-project-has-room-to-be-less-strict-with-minor-contributions\" }, [\n  /*#__PURE__*/_createTextVNode(\"The Python project has room to be less strict with minor contributions\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#the-python-project-has-room-to-be-less-strict-with-minor-contributions\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_39 = /*#__PURE__*/_createElementVNode(\"p\", null, \"If somebody wants to fix a typo in the Python project, they do not need to post a new issue before making a pull request. They can simply make the pull request immediately. From what I know, this is not the case in TEAMMATES. At the very least, it is not explicitly mentioned in the TEAMMATES developer guide.\", -1 /* HOISTED */)\nconst _hoisted_40 = /*#__PURE__*/_createElementVNode(\"h5\", { id: \"the-python-project-automatically-merges-bug-fixes-on-all-its-branches\" }, [\n  /*#__PURE__*/_createTextVNode(\"The Python project automatically merges bug fixes on all its branches\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#the-python-project-automatically-merges-bug-fixes-on-all-its-branches\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_41 = /*#__PURE__*/_createElementVNode(\"p\", null, \"When a Python version is released, people will use that version of Python. They may continue to use that version for their projects even when much newer Python versions are released. Thus, the Python team needs to continue to support older versions (up to a limit) by making sure that bug fixes, and security patches are also made to the supported older Python versions.\", -1 /* HOISTED */)\nconst _hoisted_42 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createTextVNode(\"Each version is maintained on their own respective Git branch, but all changes are initially made by submitting a PR to the main branch. The PRs are given labels like \"),\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"needs backport to 3.12\"),\n  /*#__PURE__*/_createTextVNode(\" which indicate whether the PR needs to be backported to a specific Git branch for a Python version. When a PR is merged into the main branch, a bot (\"),\n  /*#__PURE__*/_createElementVNode(\"a\", { href: \"https://github.com/apps/miss-islington-app\" }, \"miss-islington-app\"),\n  /*#__PURE__*/_createTextVNode(\") backports it to older Python branches according to the labels. It does this by submitting the same PR to the Git branches of the relevant Python versions. A member of the Python project team can then merge the PR into the Git branches of the relevant Python versions.\")\n], -1 /* HOISTED */)\nconst _hoisted_43 = /*#__PURE__*/_createElementVNode(\"p\", null, \"In TEAMMATES, we may often have multiple feature branches in addition to the main branch. Fixes may be made to the main branch that are also required on the feature branches. In TEAMMATES, we often integrate these fixes into the feature branches by manually rebasing the feature branch onto the last commit on the main branch or merging the main branch into the feature branch. In other words, unlike in the Python project where changes in the main branch are almost automatically integrated into the other branches, in TEAMMATES, these changes to the main branch are manually integrated into other branches.\", -1 /* HOISTED */)\nconst _hoisted_44 = /*#__PURE__*/_createElementVNode(\"h4\", { id: \"suggestions-for-the-internal-project-based-on-external-project-observations\" }, [\n  /*#__PURE__*/_createTextVNode(\"Suggestions for the internal project based on external project observations\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#suggestions-for-the-internal-project-based-on-external-project-observations\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_45 = /*#__PURE__*/_createElementVNode(\"h5\", { id: \"changelog-with-highlights\" }, [\n  /*#__PURE__*/_createTextVNode(\"Changelog with highlights\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#changelog-with-highlights\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_46 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Instead of displaying all the changes equally, it may be better to highlight some of them, as they be more significant to more users. Users may not notice those changes if they are displayed equally with the rest, even it may be of interest to them.\", -1 /* HOISTED */)\nconst _hoisted_47 = /*#__PURE__*/_createElementVNode(\"h5\", { id: \"minor-contributions-should-not-require-github-issues\" }, [\n  /*#__PURE__*/_createTextVNode(\"Minor contributions should not require GitHub issues\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#minor-contributions-should-not-require-github-issues\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_48 = /*#__PURE__*/_createElementVNode(\"p\", null, \"For minor contributions, it seems like it would be overkill to need to post an issue before a pull request can be made. If it is not already the case, then maybe we should allow minor contributions without their own GitHub issues. We should also make it clear in the developer guide that this is allowed.\", -1 /* HOISTED */)\nconst _hoisted_49 = /*#__PURE__*/_createElementVNode(\"h5\", { id: \"automation-to-integrate-changes-in-the-main-branch-into-the-feature-branches\" }, [\n  /*#__PURE__*/_createTextVNode(\"Automation to integrate changes in the main branch into the feature branches\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#automation-to-integrate-changes-in-the-main-branch-into-the-feature-branches\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_50 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Instead of manually rebasing onto the main branch or manually merging the main branch into a feature branch, maybe it would be better to do it automatically. Maybe a bot can do this for us. A problem I can foresee with this is if there are merge conflicts. However, it is possible to make a PR for merging branches. The merge conflicts may be resolved manually in the branch created for the PR. While this reintroduces some manual work, the merge conflicts should not occur all the time. If this automation is possible, with some of the changes in the main branch being integrated into the feature branches automatically, this may reduce some of the load on the developers.\", -1 /* HOISTED */)\nconst _hoisted_51 = /*#__PURE__*/_createElementVNode(\"hr\", { class: \"footnotes-sep\" }, null, -1 /* HOISTED */)\nconst _hoisted_52 = { class: \"footnotes\" }\nconst _hoisted_53 = { class: \"footnotes-list\" }\nconst _hoisted_54 = /*#__PURE__*/_createElementVNode(\"div\", null, [\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"In the Python project, \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"NEWS\"),\n    /*#__PURE__*/_createTextVNode(\" entries document contributions so that it can be added into the changelog.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_55 = /*#__PURE__*/_createElementVNode(\"li\", {\n  id: \"fn--1\",\n  class: \"footnote-item\"\n}, [\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"In the Python project, \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"NEWS\"),\n    /*#__PURE__*/_createTextVNode(\" entries document contributions so that it can be added into the changelog.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_56 = /*#__PURE__*/_createElementVNode(\"div\", { class: \"nav-component slim-scroll\" }, null, -1 /* HOISTED */)\nconst _hoisted_57 = /*#__PURE__*/_createStaticVNode(\"<footer><div class=\\\"text-center\\\"><p>[<strong>This site was generated using <img src=\\\"https://markbind.org/favicon.ico\\\" width=\\\"25\\\"> <a href=\\\"https://markbind.org/\\\">MarkBind 6.0.2</a></strong> on Sat, 25 Oct 2025, 17:41:29 UTC]<br> <span class=\\\"dimmed\\\"><small><small>favicon.ico of this site was made by <a href=\\\"https://www.flaticon.com/authors/smashicons\\\" title=\\\"Smashicons\\\">Smashicons</a> from <a href=\\\"https://www.flaticon.com/\\\" title=\\\"Flaticon\\\">www.flaticon.com</a> is licensed by <a href=\\\"http://creativecommons.org/licenses/by/3.0/\\\" title=\\\"Creative Commons BY 3.0\\\" target=\\\"_blank\\\">CC 3.0 BY</a></small></small></span></p></div></footer>\", 1)\n\nreturn function render(_ctx, _cache) {\n  const _component_dropdown = _resolveComponent(\"dropdown\")\n  const _component_navbar = _resolveComponent(\"navbar\")\n  const _component_trigger = _resolveComponent(\"trigger\")\n  const _component_popover = _resolveComponent(\"popover\")\n  const _component_overlay_source = _resolveComponent(\"overlay-source\")\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createElementVNode(\"header\", _hoisted_1, [\n      _createVNode(_component_navbar, {\n        placement: \"top\",\n        type: \"primary\"\n      }, {\n        brand: _withCtx(() => [\n          _hoisted_2\n        ]),\n        right: _withCtx(() => [\n          _hoisted_12\n        ]),\n        default: _withCtx(() => [\n          _createTextVNode(),\n          _createVNode(_component_dropdown, { class: \"nav-link\" }, {\n            header: _withCtx(() => [\n              _createTextVNode(\"CS3281\")\n            ]),\n            default: _withCtx(() => [\n              _createTextVNode(),\n              _hoisted_3,\n              _createTextVNode(),\n              _hoisted_4,\n              _createTextVNode(),\n              _hoisted_5,\n              _createTextVNode(),\n              _hoisted_6\n            ]),\n            _: 1 /* STABLE */\n          }),\n          _createTextVNode(),\n          _createVNode(_component_dropdown, { class: \"nav-link\" }, {\n            header: _withCtx(() => [\n              _createTextVNode(\"CS3282\")\n            ]),\n            default: _withCtx(() => [\n              _createTextVNode(),\n              _hoisted_7,\n              _createTextVNode(),\n              _hoisted_8,\n              _createTextVNode(),\n              _hoisted_9\n            ]),\n            _: 1 /* STABLE */\n          }),\n          _createTextVNode(),\n          _hoisted_10,\n          _createTextVNode(),\n          _hoisted_11,\n          _createTextVNode()\n        ]),\n        _: 1 /* STABLE */\n      })\n    ]),\n    _createTextVNode(),\n    _createElementVNode(\"div\", _hoisted_13, [\n      _createElementVNode(\"div\", _hoisted_14, [\n        _hoisted_15,\n        _createTextVNode(),\n        _hoisted_16,\n        _createTextVNode(),\n        _hoisted_17,\n        _createTextVNode(),\n        _hoisted_18,\n        _createTextVNode(),\n        _hoisted_19,\n        _createTextVNode(),\n        _hoisted_20,\n        _createTextVNode(),\n        _hoisted_21,\n        _createTextVNode(),\n        _hoisted_22,\n        _createTextVNode(),\n        _hoisted_23,\n        _createTextVNode(),\n        _hoisted_24,\n        _createTextVNode(),\n        _hoisted_25,\n        _createTextVNode(),\n        _createElementVNode(\"p\", null, [\n          _createTextVNode(\"Python uses reStructuredText (RST) to document their project. RST is a lightweight markup language. It is not difficult to use, but it has its own syntax, which is different from the more popular markup languages like Markdown. I had to write a \"),\n          _hoisted_26,\n          _createTextVNode(\" entry\"),\n          _createVNode(_component_trigger, { for: \"pop:footnotefn--1\" }, {\n            default: _withCtx(() => [\n              _hoisted_27\n            ]),\n            _: 1 /* STABLE */\n          }),\n          _createTextVNode(\" using RST. I used the \"),\n          _hoisted_28,\n          _createTextVNode(\" to help me figure out how to write using RST.\")\n        ]),\n        _createTextVNode(),\n        _hoisted_29,\n        _createTextVNode(),\n        _hoisted_30,\n        _createTextVNode(),\n        _hoisted_31,\n        _createTextVNode(),\n        _hoisted_32,\n        _createTextVNode(),\n        _hoisted_33,\n        _createTextVNode(),\n        _hoisted_34,\n        _createTextVNode(),\n        _hoisted_35,\n        _createTextVNode(),\n        _hoisted_36,\n        _createTextVNode(),\n        _hoisted_37,\n        _createTextVNode(),\n        _hoisted_38,\n        _createTextVNode(),\n        _hoisted_39,\n        _createTextVNode(),\n        _hoisted_40,\n        _createTextVNode(),\n        _hoisted_41,\n        _createTextVNode(),\n        _hoisted_42,\n        _createTextVNode(),\n        _hoisted_43,\n        _createTextVNode(),\n        _hoisted_44,\n        _createTextVNode(),\n        _hoisted_45,\n        _createTextVNode(),\n        _hoisted_46,\n        _createTextVNode(),\n        _hoisted_47,\n        _createTextVNode(),\n        _hoisted_48,\n        _createTextVNode(),\n        _hoisted_49,\n        _createTextVNode(),\n        _hoisted_50,\n        _createTextVNode(),\n        _hoisted_51,\n        _createTextVNode(),\n        _createElementVNode(\"section\", _hoisted_52, [\n          _createElementVNode(\"ol\", _hoisted_53, [\n            _createVNode(_component_popover, { id: \"pop:footnotefn--1\" }, {\n              content: _withCtx(() => [\n                _hoisted_54\n              ]),\n              _: 1 /* STABLE */\n            }),\n            _createTextVNode(),\n            _hoisted_55\n          ])\n        ])\n      ]),\n      _createTextVNode(),\n      _createVNode(_component_overlay_source, {\n        id: \"page-nav\",\n        class: \"fixed-header-padding\",\n        \"tag-name\": \"nav\",\n        to: \"page-nav\"\n      }, {\n        default: _withCtx(() => [\n          _hoisted_56\n        ]),\n        _: 1 /* STABLE */\n      })\n    ]),\n    _createTextVNode(),\n    _hoisted_57\n  ], 64 /* STABLE_FRAGMENT */))\n}");
    var render = renderFn();
  